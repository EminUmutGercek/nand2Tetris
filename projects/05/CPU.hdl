// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          //15 Because @x only hold 15 bits.

    PARTS:
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=potentialAReg);

    //A Register
    Not(in=instruction[15], out=notInsOp);//A Register laod by A-Instruction
    And(a=instruction[15], b=instruction[5], out=CInstLoadAReg);
    Or(a=notInsOp, b=CInstLoadAReg, out=loadAReg);//Included d1 from C-Instruction
    ARegister(in=potentialAReg, load=loadAReg, out= ARegOut, out[0..14]=addressM);

    //ALU Operand A or M
    Mux16(a=ARegOut, b=inM, sel=instruction[12], out=aluAMRegOperand);

    //D Register
    And(a=instruction[15], b=instruction[4], out=loadDReg);
    DRegister(in=aluOut, load=loadDReg, out= aluDRegOperand);


    ALU(x=aluDRegOperand, y=aluAMRegOperand, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6], out=outM,out=aluOut, zr=zrAlu, ng=ngAlu);

    
    //JUMP FOR PC

    Not(in=ngAlu, out=notNg);
    Not(in=zrAlu, out=notZr);
    And(a=notNg, b=notZr, out=psAlu);    
        //Greater 0
    And(a=psAlu, b=instruction[0], out=psOut);    
        //Equal 0
    And(a=zrAlu, b=instruction[1], out=eqOut);
        //Lower 0
    And(a=ngAlu, b=instruction[2], out=ngOut);

    Or(a=eqOut, b=psOut, out=eqPsOut);
    Or(a=eqPsOut, b=ngOut, out=allOut);
        //Checking was it C Instruction
    And(a=allOut, b=instruction[15], out=loadPC);
    //Not(in=loadPC, out=increment); //No Need actually

    //writeM 
    And(a=instruction[15], b=instruction[3], out=writeM);



    PC(in=ARegOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    
}